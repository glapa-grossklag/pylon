#!/usr/bin/env python
from pathlib import Path
from typing import Optional, Final
import argparse
import ast
import hashlib
import os
import re
import subprocess
import tempfile
import venv


CACHE_DIR: Final[Path] = Path.home() / ".cache" / "pylon"


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="standalone Python runner with dependencies")
    parser.add_argument("file", type=Path, help="the Python file to run")
    parser.add_argument("args", nargs="*", help="arguments to pass to the Python file")
    parser.add_argument("--invalidate-cache", action="store_true", help="invalidate the cache")
    return parser.parse_args()


def get_docstring(path: Path) -> Optional[str]:
    """
    Get the docstring of a Python file.
    """
    with open(path, "r") as file:
        content = file.read()

    module = ast.parse(content)
    docstring = ast.get_docstring(module)
    return docstring


def get_requirements(path: Path) -> Optional[str]:
    """
    Get the requirements of a Python file.
    """
    docstring = get_docstring(path)
    if docstring is None:
        return None
    
    match = re.search(r"```requirements([\s\S]*)?```", docstring)
    if match is None:
        return None
    
    requirements = match.group(1).strip() + "\n"
    return requirements


def hash(s: str) -> str:
    """
    Get the SHA-256 hash of a string.
    """
    return hashlib.sha256(str(s).encode()).hexdigest()


def install_requirements(path: Path, invalidate_cache: bool = False) -> None:
    """
    Install the requirements for the given Python file in a virtual environment.
    """
    requirements = get_requirements(path)
    if requirements is None:
        return

    if not CACHE_DIR.exists():
        os.mkdir(CACHE_DIR)

    venv_path = CACHE_DIR / hash(str(path))
    if invalidate_cache and venv_path.exists():
            print(f"🗑️  Invalidating cache")
            subprocess.run(["rm", "-rf", venv_path], check=True)

    if not venv_path.exists():
        venv.create(venv_path, with_pip=True)
        print(f"🌎 Created virtual environment in {venv_path}")
    else:
        print(f"🌎 Using virtual environment in {venv_path}")

    pip = venv_path / "bin" / "pip"
    assert pip.exists()

    with tempfile.NamedTemporaryFile(mode="w") as file:
        file.write(requirements)
        file.flush()



        print("📡 Installing requirements...")
        subprocess.run(
            args=[str(pip), "install", "--upgrade", "--requirement", file.name],
            check=True,
        )
    
    with open(venv_path / "requirements_sha256.txt", mode="w") as file:
        file.write(hash(requirements))


def are_requirements_installed(path: Path) -> bool:
    """
    Check if the requirements are already installed for the given Python file.
    """
    requirements = get_requirements(path)    

    venv_path = CACHE_DIR / hash(str(path))
    if not venv_path.exists():
        return False

    try:
        with open(venv_path / "requirements_sha256.txt", mode="r") as file:
            last_requirements_hash = file.read().strip()
    except FileNotFoundError:
        last_requirements_hash = ""
    
    return last_requirements_hash == hash(requirements)


def main():
    args = parse_args()

    if not are_requirements_installed(args.file) or args.invalidate_cache:
        install_requirements(args.file, args.invalidate_cache)

        requirements = get_requirements(args.file)
        number_of_requirements = len(requirements.splitlines())
        print(f"📦 Installed {number_of_requirements} requirement{'s' if number_of_requirements != 1 else ''}")

    python = CACHE_DIR / hash(args.file) / "bin" / "python"
    subprocess.run([python, args.file] + args.args)


if __name__ == "__main__":
    main()
